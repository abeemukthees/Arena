apply plugin: 'com.android.library'
/*
 * Copyright 2017, Abhi Muktheeswarar
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//apply plugin: 'com.jakewharton.hugo'
apply plugin: 'realm-android'

android {
    defaultPublishConfig "debug"

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")

        buildConfigField("String", "THEMOVIEDB_API_KEY", theMovieDb_apiKey)
        buildConfigField("String", "MEDI_BASE_URL", mediBaseUrl)
        buildConfigField("String", "MEDI_TOKEN_KEY", mediTokenKey)
        buildConfigField("String", "MEDI_TOKEN", mediToken)
        buildConfigField("String", "IMGUR_CLIENT_ID", imgurClientId)

        testInstrumentationRunner globalConfiguration["testInstrumentationRunner"]

        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        pickFirst 'META-INF/rxjava.properties'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'  // Some libraries have issues with this
        disable 'OldTargetApi'
        // Due to Robolectric that modifies the manifest when running tests
    }
}

dependencies {
    def dataDependencies = rootProject.ext.dataDependencies
    def testDependencies = rootProject.ext.dataTestDependencies

    implementation project(':Domain')
    provided dataDependencies.javaxAnnotation
    implementation dataDependencies.javaxInject
    implementation dataDependencies.rxJava
    implementation dataDependencies.rxAndroid
    implementation dataDependencies.rxJavaExtras
    implementation dataDependencies.rxJava2Extras
    implementation dataDependencies.androidAnnotations
    //implementation dataDependencies.multiDex

    implementation dataDependencies.okHttp
    implementation dataDependencies.okHttpInterceptor
    implementation(dataDependencies.loggingInterceptor) {
        exclude group: 'org.json', module: 'json'
    }
    implementation dataDependencies.retrofit
    implementation dataDependencies.RetrofitAdapaterJackson
    implementation dataDependencies.rxCallAdapter

    implementation dataDependencies.reactiveNetwork
    implementation dataDependencies.rxJava2Interop

    implementation dataDependencies.location
    implementation dataDependencies.rxLocation

    androidTestImplementation testDependencies.junit
    androidTestImplementation testDependencies.assertj
    androidTestImplementation testDependencies.mockito
    androidTestImplementation testDependencies.runner

    implementation developmentDependencies.logger

    testImplementation testDependencies.testing
    testImplementation testDependencies.junit
    testImplementation testDependencies.mockito
    testImplementation testDependencies.robolectric
    testImplementation testDependencies.okhttpMockWebServer
    testImplementation testDependencies.retrofitMock
    testImplementation testDependencies.awaitility

    debugCompile developmentDependencies.debugDb
}
