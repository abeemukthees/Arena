apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
/*
 * Copyright 2017, Abhi Muktheeswarar
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//apply plugin: 'com.jakewharton.hugo'
apply plugin: 'realm-android'

android {
    defaultPublishConfig "debug"

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")

        buildConfigField("String", "THEMOVIEDB_API_KEY", theMovieDb_apiKey)
        buildConfigField("String", "MEDI_BASE_URL", mediBaseUrl)
        buildConfigField("String", "MEDI_TOKEN_KEY", mediTokenKey)
        buildConfigField("String", "MEDI_TOKEN", mediToken)

        testInstrumentationRunner globalConfiguration["testInstrumentationRunner"]

        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        pickFirst 'META-INF/rxjava.properties'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'  // Some libraries have issues with this
        disable 'OldTargetApi'
        // Due to Robolectric that modifies the manifest when running tests
    }
}

dependencies {
    def dataDependencies = rootProject.ext.dataDependencies
    def testDependencies = rootProject.ext.dataTestDependencies

    compile project(':Domain')
    provided dataDependencies.javaxAnnotation
    compile dataDependencies.javaxInject
    compile dataDependencies.rxJava
    compile dataDependencies.rxAndroid
    compile dataDependencies.rxJavaExtras
    compile dataDependencies.rxJava2Extras
    compile dataDependencies.androidAnnotations
    //compile dataDependencies.multiDex

    compile dataDependencies.okHttp
    compile dataDependencies.okHttpInterceptor
    compile(dataDependencies.loggingInterceptor) {
        exclude group: 'org.json', module: 'json'
    }
    compile dataDependencies.retrofit
    compile dataDependencies.RetrofitAdapaterJackson
    compile dataDependencies.rxCallAdapter

    compile dataDependencies.reactiveNetwork
    compile dataDependencies.rxJava2Interop

    compile dataDependencies.location
    compile dataDependencies.rxLocation

    androidTestCompile testDependencies.junit
    androidTestCompile testDependencies.assertj
    androidTestCompile testDependencies.mockito
    androidTestCompile testDependencies.runner

    compile developmentDependencies.logger

    testCompile testDependencies.testing
    testCompile testDependencies.junit
    testCompile testDependencies.mockito
    testCompile testDependencies.robolectric
    testCompile testDependencies.okhttpMockWebServer
    testCompile testDependencies.retrofitMock
    testCompile testDependencies.awaitility

    debugCompile developmentDependencies.debugDb
}
