apply plugin: 'com.android.application'
//apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.f2prateek.javafmt'
apply plugin: 'com.frogermcs.androiddevmetrics'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

    defaultConfig {
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]

        applicationId globalConfiguration["androidApplicationId"]
        versionCode globalConfiguration["androidVersionCode"]
        versionName globalConfiguration["androidVersionName"]
        testInstrumentationRunner globalConfiguration["testInstrumentationRunner"]
        testApplicationId globalConfiguration["testApplicationId"]

        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        pickFirst 'META-INF/rxjava.properties'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'
        //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    def developmentDependencies = rootProject.ext.developmentDependencies

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(':Domain')
    compile project(':Data')

    annotationProcessor presentationDependencies.daggerCompiler
    compile presentationDependencies.dagger
    annotationProcessor presentationDependencies.daggerAndroidProcessor
    compile presentationDependencies.daggerAndroid
    compile presentationDependencies.daggerAndroidSupport
    compile presentationDependencies.findBugs
    annotationProcessor presentationDependencies.butterKnifeCompiler
    compile presentationDependencies.butterKnife
    compile presentationDependencies.rxJava
    compile presentationDependencies.rxAndroid
    compile presentationDependencies.rxJavaExtras
    compile presentationDependencies.rxJava2Extras
    provided presentationDependencies.javaxAnnotation

    compile presentationDependencies.lifeCycleRuntime
    compile presentationDependencies.lifeCycleExtensions
    annotationProcessor presentationDependencies.lifeCycleCompiler

    compile presentationDependencies.androidAnnotations
    compile presentationDependencies.supportLibraryV4
    compile presentationDependencies.supportLibraryV7
    compile presentationDependencies.designSupport
    compile presentationDependencies.cardView
    compile presentationDependencies.constraintLayout

    annotationProcessor presentationDependencies.epoxyProcessor
    compile presentationDependencies.epoxy
    compile presentationDependencies.glide
    annotationProcessor presentationDependencies.glideProcessor
    compile presentationDependencies.parceler
    annotationProcessor presentationDependencies.parcelerProcessor

    compile presentationDependencies.rxActivityResult
    compile presentationDependencies.rxBinding
    compile presentationDependencies.rxBindingV4Support
    compile presentationDependencies.rxBindingV7Support
    compile presentationDependencies.rxBindingDesign
    compile presentationDependencies.rxBindingRecyclerView
    compile presentationDependencies.rxPermissions
    compile presentationDependencies.rxPaparazzo

    compile presentationDependencies.alerter

    androidTestCompile presentationTestDependencies.androidAnnotations
    androidTestCompile presentationTestDependencies.junit
    androidTestCompile presentationTestDependencies.mockito
    androidTestCompile presentationTestDependencies.mockitoAndroid
    androidTestCompile presentationTestDependencies.dexmaker
    androidTestCompile presentationTestDependencies.dexmakerMockito
    androidTestCompile(presentationTestDependencies.espresso) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile presentationTestDependencies.runner
    androidTestCompile presentationTestDependencies.rules
    androidTestCompile presentationTestDependencies.uiautomator
    androidTestCompile presentationTestDependencies.findBugs
    androidTestCompile presentationTestDependencies.architectureCore

    testCompile presentationTestDependencies.junit
    testCompile presentationTestDependencies.mockito
    testCompile presentationDependencies.leakCanary
    testCompile presentationTestDependencies.testing
    testCompile presentationTestDependencies.architectureCore

    //Development
    debugCompile developmentDependencies.leakCanary
    compile developmentDependencies.takt
    compile developmentDependencies.logger
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
}