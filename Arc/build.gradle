/*
 * Copyright 2017, Abhi Muktheeswarar
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'com.frogermcs.androiddevmetrics'
//apply plugin: 'realm-android'

android {

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion 28
    buildToolsVersion "28.0.2"

    defaultConfig {
        applicationId "msa.arc"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        pickFirst 'META-INF/rxjava.properties'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'
        //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    def developmentDependencies = rootProject.ext.developmentDependencies

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':Domain')
    implementation project(':Data')

    annotationProcessor presentationDependencies.daggerCompiler
    implementation presentationDependencies.dagger
    annotationProcessor presentationDependencies.daggerAndroidProcessor
    implementation presentationDependencies.daggerAndroid
    implementation presentationDependencies.daggerAndroidSupport
    implementation presentationDependencies.findBugs
    annotationProcessor presentationDependencies.butterKnifeCompiler
    implementation presentationDependencies.butterKnife
    implementation presentationDependencies.rxJava
    implementation presentationDependencies.rxAndroid
    implementation presentationDependencies.rxJavaExtras
    implementation presentationDependencies.rxJava2Extras
    implementation presentationDependencies.javaxAnnotation

    implementation presentationDependencies.supportLibraryV4
    implementation presentationDependencies.supportLibraryV7
    implementation presentationDependencies.designSupport
    implementation presentationDependencies.cardView
    implementation presentationDependencies.constraintLayout

    annotationProcessor presentationDependencies.epoxyProcessor
    implementation presentationDependencies.epoxy

    implementation presentationDependencies.alerter

    implementation presentationDependencies.androidAnnotations
    implementation presentationDependencies.leakCanary

    implementation presentationDependencies.lifeCycleRuntime
    implementation presentationDependencies.lifeCycleExtensions
    annotationProcessor presentationDependencies.lifeCycleCompiler

    androidTestImplementation presentationTestDependencies.androidAnnotations
    androidTestImplementation presentationTestDependencies.junit
    androidTestImplementation presentationTestDependencies.mockito
    androidTestImplementation presentationTestDependencies.dexmaker
    androidTestImplementation presentationTestDependencies.dexmakerMockito
    androidTestImplementation(presentationTestDependencies.espresso) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation presentationTestDependencies.runner
    androidTestImplementation presentationTestDependencies.rules
    androidTestImplementation presentationTestDependencies.uiautomator
    androidTestImplementation presentationTestDependencies.findBugs

    //testImplementation presentationDependencies.leakCanary
    testImplementation presentationTestDependencies.testing

    //Development
    debugImplementation developmentDependencies.leakCanary
}